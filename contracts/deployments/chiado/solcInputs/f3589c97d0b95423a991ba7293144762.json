{
  "language": "Solidity",
  "sources": {
    "interfaces/ILightBulb.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@shotaronowhere]\n *  @reviewers: []\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.8.0;\n\ninterface ILightBulb {\n    /**\n    * @dev Toggles the lightbulb on or off.\n    * @param _msgSender The address of the sender on the L2 side.\n    * @param lightBulbOwner The address of the owner of the lightbulb on the L2 side.\n    */\n    function toggleMyLightBulb(address _msgSender, address lightBulbOwner) external;\n    /**\n    * @dev Toggles the global lightbulb on or off.\n    * @param _msgSender The address of the sender on the L2 side.\n    */\n    function toggleGlobalLightBulb(address _msgSender) external;\n}\n"
    },
    "interfaces/IVeaInbox.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@jaybuidl, @shotaronowhere]\n *  @reviewers: []\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.8.0;\n\ninterface IVeaInbox {\n    /**\n     * Note: Calls authenticated by receiving gateway checking the sender argument.\n     * @dev Sends an arbitrary message to Ethereum.\n     * @param to The cross-domain contract address which receives the calldata.\n     * @param data The message calldata, abi.encodeWithSelector(...)\n     * @return msgId The index of the message in the inbox, as a message Id, needed to relay the message.\n     */\n    function sendMsg(address to, bytes memory data) external returns (uint64 msgId);\n}\n"
    },
    "src/LightBulb.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@shotaronowhere]\n *  @reviewers: []\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.8.0;\n\n/**\n * @title LightBulb\n * @dev A lightbulb on ethereum controlled by a switch on Arbitrum with the Vea bridge.\n **/\n \ncontract LightBulb{\n    \n    address public immutable veaOutbox; // vea bridge on L1\n    address public immutable lightBulbSwitch; // The switch on arbitrum that controls this lightbulb.\n    bool public globalLighbulb;\n    mapping (address=>bool) public lightBulbIsOn;\n    \n    constructor(address _veaOutbox, address _lightBulbSwitch) {\n        veaOutbox = _veaOutbox;\n        lightBulbSwitch = _lightBulbSwitch;\n    }\n\n    modifier onlyAuthenticatedFromVea(address _msgSender) {\n        require(msg.sender == veaOutbox, \"L1 Auth: Only Vea Bridge.\");\n        require(_msgSender == lightBulbSwitch, \"L2 Auth: Only the switch can turn on the lightbulb.\");\n        _;\n    }\n\n    /**\n    * @dev Toggles the lightbulb on or off.\n    * @param _msgSender The address of the sender on the L2 side.\n    * @param lightBulbOwner The address of the owner of the lightbulb on the L2 side.\n    */\n    function toggleMyLightBulb(address _msgSender, address lightBulbOwner) external onlyAuthenticatedFromVea(_msgSender) {\n        // lightBulbOwner authentication is done on the L2 switch side.\n        lightBulbIsOn[lightBulbOwner] = !lightBulbIsOn[lightBulbOwner];\n    }\n\n    /**\n    * @dev Toggles the global lightbulb on or off.\n    * @param _msgSender The address of the sender on the L2 side.\n    */\n    function toggleGlobalLightBulb(address _msgSender) external onlyAuthenticatedFromVea(_msgSender){\n        // lightbulb is global, no owner authentication is needed.\n        globalLighbulb = !globalLighbulb;\n    }\n}"
    },
    "src/Switch.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@shotaronowhere]\n *  @reviewers: []\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IVeaInbox.sol\";\nimport \"../interfaces/ILightBulb.sol\";\n\n/**\n * @title Lightbulb\n * @dev A switch on arbitrum turning a light on and off on arbitrum with the Vea bridge.\n */\ncontract Switch{\n\n    IVeaInbox public immutable veaInbox; // vea inbox on arbitrum\n    address public immutable lightBulb; // gateway on goerli\n\n    /**\n     * @dev The Fast Bridge participants watch for these events to decide if a challenge should be submitted.\n     * @param _epoch The epoch for which the the claim was made.\n     * @param _batchMerkleRoot The timestamp of the claim creation.\n     */\n    event lightBulbToggled(uint256 indexed _epoch, bytes32 _batchMerkleRoot);\n\n    /**\n     * @dev The Fast Bridge participants watch for these events to decide if a challenge should be submitted.\n     * @param _epoch The epoch for which the the claim was made.\n     * @param _batchMerkleRoot The timestamp of the claim creation.\n     */\n    event Claimed(uint256 indexed _epoch, bytes32 _batchMerkleRoot);\n\n    constructor(address _veaInbox, address _lightBulb) {\n        veaInbox = IVeaInbox(_veaInbox);\n        lightBulb = _lightBulb;\n    }\n\n    function toggleMyLightBulb() external {\n        bytes memory _calldata = abi.encodeWithSelector(ILightBulb.toggleMyLightBulb.selector, msg.sender);\n        veaInbox.sendMsg(lightBulb, _calldata);\n    }\n\n    function toggleGlobalLightBulb() external {\n        bytes memory _calldata = abi.encodeWithSelector(ILightBulb.toggleGlobalLightBulb.selector);\n        veaInbox.sendMsg(lightBulb, _calldata);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}